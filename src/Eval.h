#pragma once
#ifndef HOMURA_EVAL_H
#define HOMURA_EVAL_H

#include <iostream>
#include "ChaosMagic.h"
#include "MoveMake.h"

namespace Homura {
    
    enum MateType : uint8_t { NONE, STALE, CHECK };

    /**
     * Ronald Friederich's midgame values from PeSTO
     */
    constexpr int32_t midgameValues[][2][64] = {
    {
        {
            82,  82,  82,  82,  82,  82,  82,  82,
            60, 120, 106,  67,  59,  62,  81,  47,
            70, 115,  85,  85,  72,  78,  78,  56,
            57,  92,  88,  99,  94,  77,  80,  55,
            59,  99,  94, 105, 103,  88,  95,  68,
            62, 107, 138, 147, 113, 108,  89,  76,
            71, 116, 208, 150, 177, 143, 216, 180,
            82,  82,  82,  82,  82,  82,  82,  82,
        },
        {
            82,  82,  82,  82,  82,  82,  82,  82,
            71, 116, 208, 150, 177, 143, 216, 180,
            62, 107, 138, 147, 113, 108,  89,  76,
            59,  99,  94, 105, 103,  88,  95,  68,
            57,  92,  88,  99,  94,  77,  80,  55,
            70, 115,  85,  85,  72,  78,  78,  56,
            60, 120, 106,  67,  59,  62,  81,  47,
            82,  82,  82,  82,  82,  82,  82,  82,
        },
    },
    {
        {
            451, 440, 484, 493, 494, 478, 464, 458,
            406, 471, 488, 476, 468, 457, 461, 433,
            444, 472, 477, 480, 460, 461, 452, 432,
            454, 483, 470, 486, 476, 465, 451, 441,
            457, 469, 512, 501, 503, 484, 466, 453,
            493, 538, 522, 494, 513, 503, 496, 472,
            521, 503, 544, 557, 539, 535, 509, 504,
            520, 508, 486, 540, 528, 509, 519, 509,
        },
        {
            520, 508, 486, 540, 528, 509, 519, 509,
            521, 503, 544, 557, 539, 535, 509, 504,
            493, 538, 522, 494, 513, 503, 496, 472,
            457, 469, 512, 501, 503, 484, 466, 453,
            454, 483, 470, 486, 476, 465, 451, 441,
            444, 472, 477, 480, 460, 461, 452, 432,
            406, 471, 488, 476, 468, 457, 461, 433,
            451, 440, 484, 493, 494, 478, 464, 458,
        },
    },
    {
        {
            314, 318, 309, 320, 304, 279, 316, 232,
            318, 323, 355, 336, 334, 325, 284, 308,
            321, 362, 354, 356, 347, 349, 328, 314,
            329, 358, 356, 365, 350, 353, 341, 324,
            359, 355, 406, 374, 390, 356, 354, 328,
            381, 410, 466, 421, 402, 374, 397, 290,
            320, 344, 399, 360, 373, 409, 296, 264,
            230, 322, 240, 398, 288, 303, 248, 170,
        },
        {
            230, 322, 240, 398, 288, 303, 248, 170,
            320, 344, 399, 360, 373, 409, 296, 264,
            381, 410, 466, 421, 402, 374, 397, 290,
            359, 355, 406, 374, 390, 356, 354, 328,
            329, 358, 356, 365, 350, 353, 341, 324,
            321, 362, 354, 356, 347, 349, 328, 314,
            318, 323, 355, 336, 334, 325, 284, 308,
            314, 318, 309, 320, 304, 279, 316, 232,
        },
    },
    {
        {
            344, 326, 353, 352, 344, 351, 362, 332,
            366, 398, 386, 372, 365, 381, 380, 369,
            375, 383, 392, 379, 380, 380, 380, 365,
            369, 375, 377, 399, 391, 378, 378, 359,
            363, 372, 402, 402, 415, 384, 370, 361,
            363, 402, 415, 400, 405, 408, 402, 349,
            318, 383, 424, 395, 352, 347, 381, 339,
            357, 372, 323, 340, 328, 283, 369, 336,
        },
        {
            357, 372, 323, 340, 328, 283, 369, 336,
            318, 383, 424, 395, 352, 347, 381, 339,
            363, 402, 415, 400, 405, 408, 402, 349,
            363, 372, 402, 402, 415, 384, 370, 361,
            369, 375, 377, 399, 391, 378, 378, 359,
            375, 383, 392, 379, 380, 380, 380, 365,
            366, 398, 386, 372, 365, 381, 380, 369,
            344, 326, 353, 352, 344, 351, 362, 332,
        },
    },
    {
        {
            975, 994,1000,1010,1035,1016,1007,1024,
           1026,1022,1040,1033,1027,1036,1017, 990,
           1030,1039,1027,1020,1023,1014,1027,1011,
           1022,1028,1021,1023,1015,1016, 999,1016,
           1026,1023,1042,1024,1009,1009, 998, 998,
           1082,1072,1081,1054,1033,1032,1008,1012,
           1079,1053,1082,1009,1026,1020, 986,1001,
           1070,1068,1069,1084,1037,1054,1025, 997,
        },
        {
           1070,1068,1069,1084,1037,1054,1025, 997,
           1079,1053,1082,1009,1026,1020, 986,1001,
           1082,1072,1081,1054,1033,1032,1008,1012,
           1026,1023,1042,1024,1009,1009, 998, 998,
           1022,1028,1021,1023,1015,1016, 999,1016,
           1030,1039,1027,1020,1023,1014,1027,1011,
           1026,1022,1040,1033,1027,1036,1017, 990,
            975, 994,1000,1010,1035,1016,1007,1024,
        },
    },
    {
        {
             14,  24, -28,   8, -54,  12,  36, -15,
              8,   9, -16, -43, -64,  -8,   7,   1,
            -27, -15, -30, -44, -46, -22, -14, -14,
            -51, -33, -44, -46, -39, -27,  -1, -49,
            -36, -14, -25, -30, -27, -12, -20, -17,
            -22,  22,   6, -20, -16,   2,  24,  -9,
            -29, -38,  -4,  -8,  -7, -20,  -1,  29,
             13,   2, -34, -56, -15,  16,  23, -65,
        },
        {
             13,   2, -34, -56, -15,  16,  23, -65,
            -29, -38,  -4,  -8,  -7, -20,  -1,  29,
            -22,  22,   6, -20, -16,   2,  24,  -9,
            -36, -14, -25, -30, -27, -12, -20, -17,
            -51, -33, -44, -46, -39, -27,  -1, -49,
            -27, -15, -30, -44, -46, -22, -14, -14,
              8,   9, -16, -43, -64,  -8,   7,   1,
             14,  24, -28,   8, -54,  12,  36, -15,
        },
    },
    };

    /**
     * Ronald Friederich's endgame values from PeSTO
     */
    constexpr int32_t endgameValues[][2][64] = {
    {
        {
             94,  94,  94,  94,  94,  94,  94,  94,
             87,  96,  94, 107, 104, 102, 102, 107,
             86,  93,  89,  94,  95,  88, 101,  98,
             93,  97,  86,  87,  87,  91, 103, 107,
            111, 111,  98,  92,  99, 107, 118, 126,
            178, 176, 147, 150, 161, 179, 194, 188,
            281, 259, 226, 241, 228, 252, 267, 272,
             94,  94,  94,  94,  94,  94,  94,  94,
        },
        {
             94,  94,  94,  94,  94,  94,  94,  94,
            281, 259, 226, 241, 228, 252, 267, 272,
            178, 176, 147, 150, 161, 179, 194, 188,
            111, 111,  98,  92,  99, 107, 118, 126,
             93,  97,  86,  87,  87,  91, 103, 107,
             86,  93,  89,  94,  95,  88, 101,  98,
             87,  96,  94, 107, 104, 102, 102, 107,
             94,  94,  94,  94,  94,  94,  94,  94,
        },
    },
    {
        {
            492, 516, 499, 507, 511, 515, 514, 503,
            509, 501, 503, 503, 514, 512, 506, 506,
            496, 504, 500, 505, 511, 507, 512, 508,
            501, 504, 506, 507, 516, 520, 517, 515,
            514, 511, 513, 514, 513, 525, 515, 516,
            509, 507, 509, 516, 517, 519, 519, 519,
            515, 520, 515, 509, 523, 525, 525, 523,
            517, 520, 524, 524, 527, 530, 522, 525,
        },
        {
            517, 520, 524, 524, 527, 530, 522, 525,
            515, 520, 515, 509, 523, 525, 525, 523,
            509, 507, 509, 516, 517, 519, 519, 519,
            514, 511, 513, 514, 513, 525, 515, 516,
            501, 504, 506, 507, 516, 520, 517, 515,
            496, 504, 500, 505, 511, 507, 512, 508,
            509, 501, 503, 503, 514, 512, 506, 506,
            492, 516, 499, 507, 511, 515, 514, 503,
        },
    },
    {
        {
            217, 231, 263, 259, 266, 258, 230, 252,
            237, 258, 261, 279, 276, 271, 261, 239,
            259, 261, 278, 291, 296, 280, 278, 258,
            263, 285, 298, 297, 306, 297, 275, 263,
            263, 289, 292, 303, 303, 303, 284, 264,
            240, 262, 272, 280, 290, 291, 261, 257,
            229, 257, 256, 272, 279, 256, 273, 256,
            182, 218, 254, 250, 253, 268, 243, 223,
        },
        {
            182, 218, 254, 250, 253, 268, 243, 223,
            229, 257, 256, 272, 279, 256, 273, 256,
            240, 262, 272, 280, 290, 291, 261, 257,
            263, 289, 292, 303, 303, 303, 284, 264,
            263, 285, 298, 297, 306, 297, 275, 263,
            259, 261, 278, 291, 296, 280, 278, 258,
            237, 258, 261, 279, 276, 271, 261, 239,
            217, 231, 263, 259, 266, 258, 230, 252,
        },
    },
    {
        {
            280, 292, 281, 288, 292, 274, 288, 274,
            270, 282, 288, 301, 296, 290, 279, 283,
            282, 290, 300, 310, 307, 305, 294, 285,
            288, 294, 307, 304, 316, 310, 300, 291,
            299, 300, 307, 311, 306, 309, 306, 294,
            301, 297, 303, 295, 296, 297, 289, 299,
            283, 293, 284, 294, 285, 304, 293, 289,
            273, 280, 288, 290, 289, 286, 276, 283,
        },
        {
            273, 280, 288, 290, 289, 286, 276, 283,
            283, 293, 284, 294, 285, 304, 293, 289,
            301, 297, 303, 295, 296, 297, 289, 299,
            299, 300, 307, 311, 306, 309, 306, 294,
            288, 294, 307, 304, 316, 310, 300, 291,
            282, 290, 300, 310, 307, 305, 294, 285,
            270, 282, 288, 301, 296, 290, 279, 283,
            280, 292, 281, 288, 292, 274, 288, 274,
        },
    },
    {
        {
            895, 916, 904, 931, 893, 914, 908, 903,
            904, 900, 913, 920, 920, 906, 913, 914,
            941, 946, 953, 945, 942, 951, 909, 920,
            959, 975, 970, 967, 983, 955, 964, 918,
            972, 993, 976, 993, 981, 960, 958, 939,
            945, 955, 971, 983, 985, 945, 942, 916,
            936, 966, 961, 994, 977, 968, 956, 919,
            956, 946, 955, 963, 963, 958, 958, 927,
        },
        {
            956, 946, 955, 963, 963, 958, 958, 927,
            936, 966, 961, 994, 977, 968, 956, 919,
            945, 955, 971, 983, 985, 945, 942, 916,
            972, 993, 976, 993, 981, 960, 958, 939,
            959, 975, 970, 967, 983, 955, 964, 918,
            941, 946, 953, 945, 942, 951, 909, 920,
            904, 900, 913, 920, 920, 906, 913, 914,
            895, 916, 904, 931, 893, 914, 908, 903,
        },
    },
    {
        {
            -43, -24, -14, -28, -11, -21, -34, -53,
            -17,  -5,   4,  14,  13,   4, -11, -27,
             -9,   7,  16,  23,  21,  11,  -3, -19,
            -11,   9,  23,  27,  24,  21,  -4, -18,
              3,  26,  33,  26,  27,  24,  22,  -8,
             13,  44,  45,  20,  15,  23,  17,  10,
             11,  23,  38,  17,  17,  14,  17, -12,
            -17,   4,  15, -11, -18, -18, -35, -74,
        },
        {
            -17,   4,  15, -11, -18, -18, -35, -74,
             11,  23,  38,  17,  17,  14,  17, -12,
             13,  44,  45,  20,  15,  23,  17,  10,
              3,  26,  33,  26,  27,  24,  22,  -8,
            -11,   9,  23,  27,  24,  21,  -4, -18,
             -9,   7,  16,  23,  21,  11,  -3, -19,
            -17,  -5,   4,  14,  13,   4, -11, -27,
            -43, -24, -14, -28, -11, -21, -34, -53,
        },
    },
    };

    /**
     * Game-phase increments by piece.
     * P R N B Q K
     */
    constexpr uint8_t gamephaseInc[] = {0,2,1,1,4,0};

    /**
     * Ronald Friederich's tapered evaluation from PeSTO,
     * ported into C++
     */
    template<Alliance A, PieceType PT>
    constexpr void eval
        (
        Board* const b, 
        int32_t& mg, 
        int32_t& eg,   
        int32_t& gamePhase
        )
    {
        uint64_t j = b->getPieces<A, PT>();
        for (; j; j &= j - 1)  {
            const int i = bitScanFwd(j);
            mg += midgameValues[PT][A][i];
            eg += endgameValues[PT][A][i];
            gamePhase += gamephaseInc[PT];
        }
    }

    /**
     * Ronald Friederich's tapered evaluation from PeSTO,
     * ported into C++
     */
    template<Alliance A>
    constexpr int32_t eval
        (
        Board *const b
        )
    {
        int32_t 
            mg_max = 0, eg_max = 0,
            mg_min = 0, eg_min = 0, 
            gamePhase = 0;

        eval< A, Pawn>(  b, mg_max, eg_max, gamePhase);
        eval< A, Knight>(b, mg_max, eg_max, gamePhase);
        eval< A, Bishop>(b, mg_max, eg_max, gamePhase);
        eval< A, Rook>(  b, mg_max, eg_max, gamePhase);
        eval< A, Queen>( b, mg_max, eg_max, gamePhase);
        eval< A, King>(  b, mg_max, eg_max, gamePhase);
        
        eval<~A, Pawn>(  b, mg_min, eg_min, gamePhase);
        eval<~A, Knight>(b, mg_min, eg_min, gamePhase);
        eval<~A, Bishop>(b, mg_min, eg_min, gamePhase);
        eval<~A, Rook>(  b, mg_min, eg_min, gamePhase);
        eval<~A, Queen>( b, mg_min, eg_min, gamePhase);
        eval<~A, King>(  b, mg_min, eg_min, gamePhase);

        /**
         * Tapered eval. 
         * Interpolate midgame and endgame scores.
         */
        const int32_t mgPhase = 
            (gamePhase > 24)  * 24 + 
            (gamePhase <= 24) * gamePhase;
        const int32_t egPhase = 24 - mgPhase; 
        const int32_t
            mg = (mg_max - mg_min), 
            eg = (eg_max - eg_min);
        return (mg * mgPhase + eg * egPhase) / 24;
        
    }

    constexpr int32_t contempt
        (
        Board* const b
        ) 
    {
        return b->hasMajorMinor()? -10: 0;
    }

    constexpr int32_t mateEval
        (
        int ply
        ) 
    {
        return MateValue - ply;
    }

    inline bool isMatePossible
        (
        Board *const b
        )
    {
        if ((b->getPieces<Black, Rook>() |
                b->getPieces<White, Rook>())||
            (b->getPieces<Black, Pawn>() |
                b->getPieces<White, Pawn>()))
            return true;
        if (highBitCount(b->getAllPieces()) < 4)
            // K v K, K+B v K, K+N v K.
            // (borrowed from Leela Chess Zero).
            return false;
        if (b->getPieces<White, Knight>() |
            b->getPieces<Black, Knight>())
            return true;
        const uint64_t bishops =
                (b->getPieces<Black, Bishop>() |
                    b->getPieces<White, Bishop>());
        return (bishops & LightSquares) &&
                (bishops & DarkSquares);
    }

    inline uint32_t repeating
        (
        Board* b, 
        int ply
        ) 
    {
        uint32_t i = 50;
        State* state = b->getState();
        uint64_t key = state->key;
        State* s = state->prevState;
        if(s) s = s->prevState; 
        else return 0;
        while(s && i > 0) {
            if(s->key == key)
                return i;
            
            s = s->prevState;
            if(s) s = s->prevState; 
            else return 0;
            i -= 2;
        }
        return 0;
    }
}

#endif